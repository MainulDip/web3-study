const ethers = require("ethers")
const fs = require("fs-extra")

async function main() {
    const provider = new ethers.providers.JsonRpcProvider("http://172.25.112.1:7545")
    const wallet = new ethers.Wallet("fec0ac8764037e8356ccabfd58a5cdf6255819375a8b9bf6a53b5b7baa15f96b", provider)

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8")
    const abiIn = new ethers.utils.Interface(abi)
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8")

    // ----------------------- Deploying Contract ---------------------------------

    // const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    // console.log("Deploying.......")
    // const contract = await contractFactory.deploy(); // deploy can take some args lik gas limit etc.
    // // console.log(contract)

    // --------------------- Transaction Response + Receipt ---------------------------

    // const transactionReceipt = await contract.deployTransaction.wait(1)
    // console.log("Deployment Transaction Response")
    // console.log(contract.deployTransaction)

    // console.log("Transaction Receipt:")
    // console.log(transactionReceipt)

    // ----------------------------- Sending Transaction Manually --------------------------

    // console.log("Deploying Single Transaction With Signing: ")

    // const nonce = await wallet.getTransactionCount()
    // const tx = {
    //     nonce,
    //     gasPrice: 2000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b5061067e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063092a18201461005c578063471f7cdf1461008d5780636057361d146100ab5780636f760f41146100c7578063a6b7fc5b146100e3575b600080fd5b610076600480360381019061007191906103cd565b610101565b60405161008492919061045d565b60405180910390f35b6100956101bd565b6040516100a29190610442565b60405180910390f35b6100c560048036038101906100c091906103cd565b6101c3565b005b6100e160048036038101906100dc9190610371565b6101cd565b005b6100eb610240565b6040516100f89190610442565b60405180910390f35b6001818154811061011157600080fd5b906000526020600020906002020160009150905080600001549080600101805461013a9061054b565b80601f01602080910402602001604051908101604052809291908181526020018280546101669061054b565b80156101b35780601f10610188576101008083540402835291602001916101b3565b820191906000526020600020905b81548152906001019060200180831161019657829003601f168201915b5050505050905082565b60005481565b8060008190555050565b600060405180604001604052808381526020018481525090506001819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001019080519060200190610238929190610249565b505050505050565b60008054905090565b8280546102559061054b565b90600052602060002090601f01602090048101928261027757600085556102be565b82601f1061029057805160ff19168380011785556102be565b828001600101855582156102be579182015b828111156102bd5782518255916020019190600101906102a2565b5b5090506102cb91906102cf565b5090565b5b808211156102e85760008160009055506001016102d0565b5090565b60006102ff6102fa846104b2565b61048d565b90508281526020810184848401111561031b5761031a610611565b5b610326848285610509565b509392505050565b600082601f8301126103435761034261060c565b5b81356103538482602086016102ec565b91505092915050565b60008135905061036b81610631565b92915050565b600080604083850312156103885761038761061b565b5b600083013567ffffffffffffffff8111156103a6576103a5610616565b5b6103b28582860161032e565b92505060206103c38582860161035c565b9150509250929050565b6000602082840312156103e3576103e261061b565b5b60006103f18482850161035c565b91505092915050565b6000610405826104e3565b61040f81856104ee565b935061041f818560208601610518565b61042881610620565b840191505092915050565b61043c816104ff565b82525050565b60006020820190506104576000830184610433565b92915050565b60006040820190506104726000830185610433565b818103602083015261048481846103fa565b90509392505050565b60006104976104a8565b90506104a3828261057d565b919050565b6000604051905090565b600067ffffffffffffffff8211156104cd576104cc6105dd565b5b6104d682610620565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561053657808201518184015260208101905061051b565b83811115610545576000848401525b50505050565b6000600282049050600182168061056357607f821691505b60208210811415610577576105766105ae565b5b50919050565b61058682610620565b810181811067ffffffffffffffff821117156105a5576105a46105dd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61063a816104ff565b811461064557600080fd5b5056fea2646970667358221220e987cbaf5f61d8c8d6dde60c868a49ac2e9f38dfa7b1b6c83c2d547ed10df3a964736f6c63430008070033",
    //     chainId: 1337
    // }

    // const signedTxResponse = await wallet.signTransaction(tx)
    // console.log(signedTxResponse)

    // const sendTxResponse = await wallet.sendTransaction(tx)
    // console.log(sendTxResponse)

}

main().then(() => process.exit(0))
.catch((error) => {
    console.error(error)
    process.exit(1);
})

//